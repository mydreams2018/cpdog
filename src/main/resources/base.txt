 //每一个SocketChannel对应一个唯一的缓冲区 缓冲区固定大小 read > 0 有数据  ==-1 表示流关闭  ==0 不管
 //clientChannel.read();  没有buffer空间也不会报错.并且 对方强制关闭了连接也读取不到 因为没有空间可读

1:channelHnadler 链路 [入参、出参] 需要注意并发问题
2:channel-in-buffer 入站缓冲区、使用给定的大小字节、没有空间时拋异常、关客户端连接  每一个SocketChannel对应一个唯一的缓冲区
                    走链路时需要处理好buffer的指针、需要考虑TCP-IP粘包拆包问题、
                    每次触发事件时、只会把当前事件数据read追加到当前的buffer中. 指针一定要处理好.
3:channel-out-buffer 出站缓冲区、使用固定大小字节、每次走outHandler链路时清空数据.每个work对象私有

\n     10     换行NL
\r     13     回车CR

GET /name HTTP/1.1
Host: 192.168.9.52:9999
Connection: Upgrade
Pragma: no-cache
Cache-Control: no-cache
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.74 Safari/537.36 Edg/99.0.1150.46
Upgrade: websocket
Origin: http://localhost:63342
Sec-WebSocket-Version: 13
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6
Sec-WebSocket-Key: zkvuhevaXj9DhHgHWT29yQ==
Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits

serversocketchannel IP_TOS  为从此 Socket 发送的数据包设置 IP 标头中的流量类别或服务类型八位字节。
                            由于底层网络实现可能会忽略此值，因此应用程序应将其视为提示。
                            必须在 0 <= IP_TOS <= 255 范围内，否则将抛出 IllegalArgumentException。
                    SO_RCVBUF   接收缓冲区
                    SO_REUSEADDR 地址重用
socketchannel   SO_SNDBUF  套接字发送缓冲区的大小
                SO_RCVBUF  套接字接收缓冲区的大小
                SO_LINGER     如果存在数据，则在关闭时逗留（仅在阻塞模式下配置时）
                SO_KEEPALIVE  保持连接活跃
                IP_TOS
                SO_OOBINLINE （接收 TCP 紧急数据）默认情况下，禁用此选项，并且在套接字上接收到的 TCP 紧急数据被静默丢弃。
                TCP_NODELAY  禁用 Nagle 算法
                SO_REUSEADDR 地址重用